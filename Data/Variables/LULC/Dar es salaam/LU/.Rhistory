# Join covariates table and malaria data
cov_df = dplyr::left_join(st_drop_geometry(malaria_sf), cov_df, by=c("ID"= "ID"))
# Verify for NA value & update the data
cov_df = na.omit(cov_df)
coords = coordinates[which(coordinates$ID %in% cov_df$ID), c("X","Y")]
cov_dataset = dplyr::select(cov_df, -ID)
# define predictor list and dataset - variable without dependent variable
predictor_dataset = dplyr::select(cov_dataset,-PfPR2_10)
predictor_list = colnames(predictor_dataset)
nrow(cov_df)
city = 'Ouagadougou'
city_short= "Ouagadougou"
# Load shapefile of points with malaria prevalence, as 'sf' object
malaria_sf=st_read(paste(Dir_input_malaria_data, city, '/', "malaria_data_", as.character(city_short), '.shp', sep=""))
head(malaria_sf)
nrow(malaria_sf)
if (wet_season){
malaria_sf = malaria_sf[malaria_sf$SEASON== "Wet",]
}
if (stef_selection){
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
malaria_sf = malaria_sf[malaria_sf$SPAT_REL != "DHS",]
} else {
#malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
}
malaria_sf <- malaria_sf[,c("ID", "PfPR2_10")]
malaria_sf$ID = as.numeric(as.character(malaria_sf$ID))
# store the coordinates of malaria data
coordinates = as.data.frame(cbind(st_coordinates(malaria_sf), ID = malaria_sf$ID))
# Load covariates csv into a dataframe
cov_df = read.csv2(paste0(Dir_input_cov, city, '/', city_short, "_full_cov.csv"), sep =";")
# Join covariates table and malaria data
cov_df = dplyr::left_join(st_drop_geometry(malaria_sf), cov_df, by=c("ID"= "ID"))
# Verify for NA value & update the data
cov_df = na.omit(cov_df)
coords = coordinates[which(coordinates$ID %in% cov_df$ID), c("X","Y")]
cov_dataset = dplyr::select(cov_df, -ID)
# define predictor list and dataset - variable without dependent variable
predictor_dataset = dplyr::select(cov_dataset,-PfPR2_10)
predictor_list = colnames(predictor_dataset)
nrow(cov_df)
# Load shapefile of points with malaria prevalence, as 'sf' object
malaria_sf=st_read(paste(Dir_input_malaria_data, city, '/', "malaria_data_", as.character(city_short), '.shp', sep=""))
head(malaria_sf)
nrow(malaria_sf)
if (wet_season){
malaria_sf = malaria_sf[malaria_sf$SEASON== "Wet",]
}
if (stef_selection){
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
malaria_sf = malaria_sf[malaria_sf$SPAT_REL != "DHS",]
} else {
#malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
}
malaria_sf <- malaria_sf[,c("ID", "PfPR2_10")]
malaria_sf$ID = as.numeric(as.character(malaria_sf$ID))
# store the coordinates of malaria data
coordinates = as.data.frame(cbind(st_coordinates(malaria_sf), ID = malaria_sf$ID))
# Load covariates csv into a dataframe
cov_df = read.csv2(paste0(Dir_input_cov, city, '/', city_short, "_full_cov.csv"), sep =";")
city_short= "Ouaga"
#-----------------------------------------------
# 1. Load malaria and covariates data
#-----------------------------------------------
# Load shapefile of points with malaria prevalence, as 'sf' object
malaria_sf=st_read(paste(Dir_input_malaria_data, city, '/', "malaria_data_", as.character(city_short), '.shp', sep=""))
head(malaria_sf)
nrow(malaria_sf)
if (wet_season){
malaria_sf = malaria_sf[malaria_sf$SEASON== "Wet",]
}
if (stef_selection){
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
malaria_sf = malaria_sf[malaria_sf$SPAT_REL != "DHS",]
} else {
#malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
}
malaria_sf <- malaria_sf[,c("ID", "PfPR2_10")]
malaria_sf$ID = as.numeric(as.character(malaria_sf$ID))
# store the coordinates of malaria data
coordinates = as.data.frame(cbind(st_coordinates(malaria_sf), ID = malaria_sf$ID))
# Load covariates csv into a dataframe
cov_df = read.csv2(paste0(Dir_input_cov, city, '/', city_short, "_full_cov.csv"), sep =";")
# Join covariates table and malaria data
cov_df = dplyr::left_join(st_drop_geometry(malaria_sf), cov_df, by=c("ID"= "ID"))
# Verify for NA value & update the data
cov_df = na.omit(cov_df)
coords = coordinates[which(coordinates$ID %in% cov_df$ID), c("X","Y")]
cov_dataset = dplyr::select(cov_df, -ID)
# define predictor list and dataset - variable without dependent variable
predictor_dataset = dplyr::select(cov_dataset,-PfPR2_10)
predictor_list = colnames(predictor_dataset)
nrow(cov_df)
# Load shapefile of points with malaria prevalence, as 'sf' object
malaria_sf=st_read(paste(Dir_input_malaria_data, city, '/', "malaria_data_", as.character(city_short), '.shp', sep=""))
head(malaria_sf)
nrow(malaria_sf)
if (wet_season){
malaria_sf = malaria_sf[malaria_sf$SEASON== "Wet",]
}
if (stef_selection){
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
malaria_sf = malaria_sf[malaria_sf$SPAT_REL != "DHS",]
} else {
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
}
malaria_sf <- malaria_sf[,c("ID", "PfPR2_10")]
malaria_sf$ID = as.numeric(as.character(malaria_sf$ID))
# store the coordinates of malaria data
coordinates = as.data.frame(cbind(st_coordinates(malaria_sf), ID = malaria_sf$ID))
# Load covariates csv into a dataframe
cov_df = read.csv2(paste0(Dir_input_cov, city, '/', city_short, "_full_cov.csv"), sep =";")
# Join covariates table and malaria data
cov_df = dplyr::left_join(st_drop_geometry(malaria_sf), cov_df, by=c("ID"= "ID"))
# Verify for NA value & update the data
cov_df = na.omit(cov_df)
coords = coordinates[which(coordinates$ID %in% cov_df$ID), c("X","Y")]
cov_dataset = dplyr::select(cov_df, -ID)
# define predictor list and dataset - variable without dependent variable
predictor_dataset = dplyr::select(cov_dataset,-PfPR2_10)
predictor_list = colnames(predictor_dataset)
nrow(cov_df)
city = city_vect[1]
city_short = city_vect[2]
myepsg = city_vect[3]
city
#-----------------------------------------------
# 1. Load malaria and covariates data
#-----------------------------------------------
# Load shapefile of points with malaria prevalence, as 'sf' object
malaria_sf=st_read(paste(Dir_input_malaria_data, city, '/', "malaria_data_", as.character(city_short), '.shp', sep=""))
head(malaria_sf)
nrow(malaria_sf)
if (wet_season){
malaria_sf = malaria_sf[malaria_sf$SEASON== "Wet",]
}
if (stef_selection){
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
malaria_sf = malaria_sf[malaria_sf$SPAT_REL != "DHS",]
} else { #still check younger 16 + 2005-2016 to be coherent with celia s paper (first tests folder took above 16 as well)
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
}
malaria_sf <- malaria_sf[,c("ID", "PfPR2_10")]
malaria_sf$ID = as.numeric(as.character(malaria_sf$ID))
# store the coordinates of malaria data
coordinates = as.data.frame(cbind(st_coordinates(malaria_sf), ID = malaria_sf$ID))
# Load covariates csv into a dataframe
cov_df = read.csv2(paste0(Dir_input_cov, city, '/', city_short, "_full_cov.csv"), sep =";")
# Join covariates table and malaria data
cov_df = dplyr::left_join(st_drop_geometry(malaria_sf), cov_df, by=c("ID"= "ID"))
# Verify for NA value & update the data
cov_df = na.omit(cov_df)
coords = coordinates[which(coordinates$ID %in% cov_df$ID), c("X","Y")]
cov_dataset = dplyr::select(cov_df, -ID)
# define predictor list and dataset - variable without dependent variable
predictor_dataset = dplyr::select(cov_dataset,-PfPR2_10)
predictor_list = colnames(predictor_dataset)
nrow(cov_df)
city = city_vect[1]
city_short = city_vect[2]
myepsg = city_vect[3]
city
#-----------------------------------------------
# 1. Load malaria and covariates data
#-----------------------------------------------
# Load shapefile of points with malaria prevalence, as 'sf' object
malaria_sf=st_read(paste(Dir_input_malaria_data, city, '/', "malaria_data_", as.character(city_short), '.shp', sep=""))
head(malaria_sf)
nrow(malaria_sf)
if (wet_season){
malaria_sf = malaria_sf[malaria_sf$SEASON== "Wet",]
}
if (stef_selection){
malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
malaria_sf = malaria_sf[malaria_sf$SPAT_REL != "DHS",]
} else { #still check younger 16 + 2005-2016 to be coherent with celia s paper (first tests folder took above 16 as well)
#malaria_sf = malaria_sf[malaria_sf$UP_AGE <= 16,]
}
malaria_sf <- malaria_sf[,c("ID", "PfPR2_10")]
malaria_sf$ID = as.numeric(as.character(malaria_sf$ID))
# store the coordinates of malaria data
coordinates = as.data.frame(cbind(st_coordinates(malaria_sf), ID = malaria_sf$ID))
# Load covariates csv into a dataframe
cov_df = read.csv2(paste0(Dir_input_cov, city, '/', city_short, "_full_cov.csv"), sep =";")
# Join covariates table and malaria data
cov_df = dplyr::left_join(st_drop_geometry(malaria_sf), cov_df, by=c("ID"= "ID"))
# Verify for NA value & update the data
cov_df = na.omit(cov_df)
coords = coordinates[which(coordinates$ID %in% cov_df$ID), c("X","Y")]
cov_dataset = dplyr::select(cov_df, -ID)
# define predictor list and dataset - variable without dependent variable
predictor_dataset = dplyr::select(cov_dataset,-PfPR2_10)
predictor_list = colnames(predictor_dataset)
nrow(cov_df)
city_vect = c("Kampala", "Kamp", 32636)
city = city_vect[1]
city_short = city_vect[2]
smaller_extent = raster(paste0(Dir_input_var, "/4_LULC/", city, '/', city_short, "_LC.tif"))
#load packages
library(sp)
library(raster)
library(sf)
library(plyr)
library(dplyr)
library(mlr)
library(parallelMap) # parallelization with mlr
library(ranger)
library(ggplot2)
library(parallel)
library(pdp)
library(foreach)
library(doParallel)
city_vect = c("Kampala", "Kamp", 32636)
city = city_vect[1]
city_short = city_vect[2]
smaller_extent = raster(paste0(Dir_input_var, "/4_LULC/", city, '/', city_short, "_LC.tif"))
#load packages
library(sp)
library(raster)
library(sf)
library(plyr)
library(dplyr)
library(mlr)
library(parallelMap) # parallelization with mlr
library(ranger)
library(ggplot2)
library(parallel)
library(pdp)
library(foreach)
library(doParallel)
battuta = F
#DEFINE PARALLELIZATION PARAMETERS
parallel::detectCores()
n.cores <- parallel::detectCores() - 3
#DEFINE STUDY AREAS
cities = list(#c("Dakar", "Dakar", 32628),
#c("Ouagadougou", "Ouaga", 32630),
c("Dar es Salaam", "DES", 32737),
c("Kampala", "Kamp", 32636))
crs_REACT <- CRS("+init=epsg:4326")
#DEFINE INPUT AND OUTPUT DIRECTORIES
if (battuta){
Dir = c("C:/Users/cmorligh/ownCloud/REACTION/")
} else {
Dir = c("C:/Users/cmorligh/Nextcloud/REACTION/")
}
Dir_input_malaria_data = paste(Dir, c("3_Analysis/3_1 Malaria_data/"), sep="")
Dir_input_cov = paste(Dir, c("3_Analysis/3_2 Covariates/"), sep="")
Dir_output_rf = paste(Dir, c("3_Analysis/3_3 RF_modelling/"), sep="")
Dir_input_var = paste(Dir, c("2_Data/2_Variables/"), sep="")
Dir_input_fctions = paste0(Dir, "Functions" )
city_vect = c("Kampala", "Kamp", 32636)
city = city_vect[1]
city_short = city_vect[2]
smaller_extent = raster(paste0(Dir_input_var, "/4_LULC/", city, '/', city_short, "_LC.tif"))
paste0(Dir_input_var, "/4_LULC/", city, '/', city_short, "_LC.tif")
paste0(Dir_input_var, "4_LULC/", city, '/', city_short, "_LC.tif")
smaller_extent = raster(paste0(Dir_input_var, "4_LULC/", city, '/', city_short, "_LC.tif"))
paste0(Dir_input_var, "4_LULC/", city, '/', city_short, "_LC.tif")
smaller_extent = raster(paste0(Dir_input_var, "4_LULC/", city, '/LC/', city_short, "_LC.tif"))
plot(smaller_extent)
crs(smaller_extent)
?projectRaster
extent(smaller_extent)
?raster
raster(ext = extent(smaller_extent), resolution =1000 )
raster(ext = extent(smaller_extent), resolution =1000, crs = crs_REACT)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs_REACT)
plot()
plot(r)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs_REACT)
vals <- 1:ncell(r)
r <- setValues(r, vals)
plot(r)
plot(smaller_extent, add = T)
plot(r, add=T)
smaller_extent = raster(paste0(Dir_input_var, "4_LULC/", city, '/LC/', city_short, "_LC.tif"))
plot(smaller_extent)
crs(smaller_extent)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs_REACT)
vals <- 1:ncell(r)
r <- setValues(r, vals)
plot(r, add=T)
extent(r)
extent(smaller_extent)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
vals <- 1:ncell(r)
r <- setValues(r, vals)
plot(r)
plot(smaller_extent, add = T)
res(r)
projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
rr = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(rr, add=TRUE)
plot(r)
plot(smaller_extent, add = T)
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid, add=TRUE)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
values(ref_grid)[index] <- as.numeric(index)
plot(ref_grid)
plot(ref_grid)
plot(r)
plot(ref_grid)
projectRaster
projectRaster
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid, add=TRUE)
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- as.numeric(index)
plot(ref_grid)
ref_grid
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
vals <- 1
r <- setValues(r, vals)
res(r)
plot(r)
plot(smaller_extent, add = T)
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- as.numeric(index)
plot(ref_grid)
smaller_extent = raster(paste0(Dir_input_var, "4_LULC/", city, '/LC/', city_short, "_LC.tif"))
crs(smaller_extent)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
vals <- 1
r <- setValues(r, vals)
res(r)
plot(r)
plot(smaller_extent, add = T)
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- as.numeric(index)
plot(ref_grid)
ref_grid
table(is.na(values(r_ref_DarEs)))
table(is.na(values(ref_grid)))
plot(smaller_extent)
#load packages
library(sp)
library(raster)
library(sf)
library(plyr)
library(dplyr)
library(parallel)
library(units)
library(devtools)
library(iterators)
library(foreach)
library(exactextractr)
library(XLConnect)
library(tmap)
library(tmaptools)
library(rgdal)
library(stringr)
library(mapview)
library(tidyr)
library(tidyverse)
library(doParallel)
library(utils)
battuta = FALSE
use_displaced_pts = F #TRUE
#DEFINE PARALLELIZATION PARAMETERS
parallel::detectCores()
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK")
#check cluster definition (optional)
print(my.cluster)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
#check if it is registered (optional)
foreach::getDoParRegistered()
foreach::getDoParWorkers()
#DEFINE STUDY AREAS
cities = list(#c("Dakar", "Dakar", 32628))
#c("Ouagadougou", "Ouaga", 32630))
#c("Dar es salaam", "DES", 32737))
c("Kampala", "Kamp", 32636))
crs_REACT <- CRS("+init=epsg:4326")
#DEFINE INPUT AND OUTPUT DIRECTORIES
if (battuta){
Dir = c("C:/Users/cmorligh/ownCloud/REACTION/")
} else {
Dir = c("C:/Users/cmorligh/Nextcloud/REACTION/")
}
Dir_input_var = paste(Dir, c("2_Data/2_Variables/"), sep="")
Dir_input_malaria_data = paste(Dir, c("3_Analysis/3_1 Malaria_data/"), sep="")
Dir_out_cov = paste(Dir, c("3_Analysis/3_2 Covariates/"), sep="")
city_vect = c("Dar es salaam", "DES", 32737)
city = city_vect[1]
city_short = city_vect[2]
myepsg = city_vect[3]
city_name = paste("malaria_data_", as.character(city_short), sep="")
if (use_displaced_pts){
malaria_data_sf=st_read(paste(Dir_input_malaria_data, city, '/', city_short, "_displaced/", city_name, '.shp', sep=""))
cov_path = paste(Dir_out_cov, city, '/', city_short, "_displaced/", sep="")
dir.create(file.path(cov_path), showWarnings = F)
#read rectangular buffer shapefile
rect_buffers = st_read(paste(Dir_input_malaria_data, city, '/', city_short, "_displaced/", city_name, '_1km_rect.shp', sep=""))
rect_buffers = st_as_sf(rect_buffers)
} else {
malaria_data_sf=st_read(paste(Dir_input_malaria_data, city, '/', city_name, '.shp', sep=""))
cov_path = paste(Dir_out_cov, city, '/', sep="")
dir.create(file.path(cov_path), showWarnings = F)
#read rectangular buffer shapefile
rect_buffers = st_read(paste(Dir_input_malaria_data, city, '/', city_name, '_1km_rect.shp', sep=""))
rect_buffers = st_as_sf(rect_buffers)
crs(rect_buffers)
}
pts_with_ID = malaria_data_sf[,c("ID")]
#sometimes do not work in CRS react but projected CRS
pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
#NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#get input LU map
setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LU/"))
LU_map = st_read(paste(city_short, '_LU.shp', sep=""))
plot(LU_map)
#When label is uncertain, replace with first label found by OBIA classif
LU_map$MAP_LABEL = ifelse(LU_map$MAP_LABEL == "UNCERT", LU_map$FIRST_LABE, LU_map$MAP_LABEL)
filter(LU_map, MAP_LABEL == "UNCERT")
class = c("LU_ACS", c("ACS"))
#name of aggregated lc class
lu_name = class[1]
#values of lcz sub classes
lu_values = tail(class, -1)
#select lu classes
selected_lu_map = st_make_valid(LU_map[LU_map$MAP_LABEL %in% lu_values,])
selected_lu_map = st_as_sf(st_union(selected_lu_map,by_feature = F ))
city_vect = c("Kampala", "Kamp", 32636)
city = city_vect[1]
city_short = city_vect[2]
smaller_extent = raster(paste0(Dir_input_var, "4_LULC/", city, '/LC/', city_short, "_LC.tif"))
crs(smaller_extent)
plot(smaller_extent)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
vals <- 1
r <- setValues(r, vals)
res(r)
plot(r)
plot(smaller_extent, add = T)
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid)
Which(!is.na(ref_grid), cells=TRUE)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- as.numeric(index)
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- index
plot(ref_grid)
values(ref_grid)
table(is.na(values(ref_grid)))
r = raster("C:/Users/cmorligh/Downloads/Kampala_SA_Raster.tif")
plot(r)
plot(smaller_extent, add = T)
plot(smaller_extent, add = T)
crs(r)
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- index
plot(ref_grid)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs_REACT)
vals <- 1
r <- setValues(r, vals)
res(r)
plot(r)
r = raster("C:/Users/cmorligh/Downloads/Kampala_SA_Raster.tif")
plot(r, add=T)
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs_REACT)
vals <- 1
r <- setValues(r, vals)
res(r)
extent(r)
r = raster("C:/Users/cmorligh/Downloads/Kampala_SA_Raster.tif")
res(r)
r = raster(ext = extent(smaller_extent), resolution =0.00833333, crs = crs_REACT)
vals <- 1
r <- setValues(r, vals)
res(r)
r = raster(ext = extent(smaller_extent), resolution =0.00833333, crs = crs_REACT)
ref_grid = projectRaster(smaller_extent, r, crs = crs(smaller_extent), method = "ngb")
r = raster(ext = extent(smaller_extent), resolution =1000, crs = crs(smaller_extent))
ref_grid = projectRaster(smaller_extent, r, crs = crs_REACT, method = "ngb")
plot(ref_grid)
#Define index values
index <- Which(!is.na(ref_grid), cells=TRUE)
index
values(ref_grid)[index] <- index
plot(ref_grid)
