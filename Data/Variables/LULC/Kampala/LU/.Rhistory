#   ###############################
#
#   #NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#   pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
#
#   #create output directories
#   binary_maps_path = paste(sep="", Dir_input_var, "4_LULC/", city, "/LC/binary_maps/")
#   dir.create(file.path(binary_maps_path), showWarnings = F)
#
#   #get input LC map
#   setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LC/"))
#   LC_raster = raster(paste(city_short, "_LC.tif", sep=""))
#
#   if (city == "Dakar")
#   {legend_classes = list(c("LC_buildings", c(12, 111, 112, 113)),
#                          c("LC_trees", c(22)),
#                          c("LC_low_veg", c(23)),
#                          #c("LC_low_buildings", 111),
#                          c("LC_water", c(33)),
#                          #c("LC_med_buildings", 112),
#                          c("LC_bare_ground", c(45)),
#                          c("LC_artificial_ground", c(10)) )
#                          #c("LC_high_buildings", 113))
#
#   } else if (city == "Kampala") {legend_classes = list(c("LC_buildings", c(7)),
#                                                        c("LC_trees", c(3)),
#                                                        c("LC_low_veg", c(4)),
#                                                        c("LC_water", c(2)),
#                                                        c("LC_bare_ground", c(5)),
#                                                        c("LC_artificial_ground", c(6)) )
#
#   } else if (city == "Dar es salaam") {legend_classes =  list(c("LC_buildings", c(1, 111, 112, 113)),
#                                                               c("LC_trees",  c(5)),
#                                                               c("LC_low_veg", c(4)),
#                                                               #c("LC_low_buildings", 111),
#                                                               c("LC_water", c(2)),
#                                                               #c("LC_med_buildings", 112),
#                                                               c("LC_bare_ground", c(7)),
#                                                               c("LC_artificial_ground", c(3)) )
#                                                               #c("LC_high_buildings", 113))
#
#   } else {legend_classes =  list(c("LC_buildings", c(11, 112, 111)),
#                                  c("LC_trees", c(31)),
#                                  c("LC_low_veg", c(30)),
#                                  #c("LC_low_buildings", 112),
#                                  c("LC_water", c(41)),
#                                  #c("LC_high_buildings", 111),
#                                  c("LC_bare_ground", c(20)),
#                                  c("LC_artificial_ground", c(14)) )}
#
#
#
#   lc_cov = foreach(class=iter(legend_classes), .combine = "cbind", .packages=c("raster", "exactextractr", "sf", "rgdal", "dplyr")) %dopar% {
#
#     #name of aggregated lc class
#     lc_name = class[1]
#
#     #values of lcz sub classes
#     lc_numeric = tail(class, -1)
#
#     #create BINARY MAP
#     binary_map= (LC_raster %in% lc_numeric)
#     setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LC/binary_maps/"))
#     raster::writeRaster(x = binary_map, filename = lc_name, format="GTiff", overwrite = TRUE)
#
#     #create PROPORTIONS MAP
#     lc_prop_cov = cbind(sf::st_drop_geometry(rect_buffers), exactextractr::exact_extract(binary_map, rect_buffers, fun = 'mean', progress = T))
#     colnames(lc_prop_cov) = c("ID", lc_name)
#
#     #lc_cov = left_join(lc_cov, lc_prop_cov, by = c("ID"= "ID"))
#
#     lc_prop_cov
#
#   }
#
#   #remove duplicate ID fields
#   idx = which(duplicated(names(lc_cov)))
#   lc_cov = lc_cov[,-idx]
#   lc_cov
#   write.table(lc_cov, file=paste(cov_path, city_short, "_LC_cov.csv", sep=""), sep=";", dec=",", row.names=F)
#
#
#   ###############################
#   ###############LU##############
#   ###############################
#NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#get input LU map
pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LU/"))
LU_map = st_read(paste(city_short, '_LU.shp', sep=""))
legend_classes = list(c("LU_ACS", c("ACS")),
c("LU_informal", c("PLAN", "PLAN_HD", "PLAN_MD", "PLAN_LD")),
c("LU_planned", c("UNPLAN", "UNPLAN_HD", "UNPLAN_MD", "UNPLAN_LD", "DEPR")),
c("LU_wetlands", c("WET")))
class = c("LU_ACS", c("ACS"))
lu_cov = foreach(class=iter(legend_classes), .combine = "cbind", .packages=c("raster", "units", "sf", "sp", "dplyr")) %dopar% {
#name of aggregated lc class
lu_name = class[1]
#values of lcz sub classes
lu_values = tail(class, -1)
#select lu classes
selected_lu_map = st_make_valid(LU_map[LU_map$MAP_LABEL %in% lu_values,])
selected_lu_map = st_as_sf(st_union(selected_lu_map,by_feature = F ))
#select points LU map extent
LU_map_labels = LU_map[,c("MAP_LABEL")]
pts_in_extent = pts_with_ID_transf[!is.na(over(as_Spatial(pts_with_ID_transf), as_Spatial(LU_map_labels))), ]
rect_buffers_in_extent = rect_buffers[rect_buffers$ID %in% pts_in_extent$ID,]
rect_buffers_in_extent$area = st_area(rect_buffers_in_extent)
pts_not_in_extent = pts_with_ID_transf[is.na(over(as_Spatial(pts_with_ID_transf), as_Spatial(LU_map_labels))), ]
rect_buffers_not_in_extent = st_drop_geometry(rect_buffers[rect_buffers$ID %in% pts_not_in_extent$ID,])
rect_buffers_not_in_extent$proportion = NA
#intersect lu map with rect buffers
lu_in_rect = st_intersection(selected_lu_map, rect_buffers_in_extent)
lu_in_rect$intersect_area = st_area(lu_in_rect)
#compute proportions
lu_in_rect = st_drop_geometry(lu_in_rect)
lu_in_rect$proportion = lu_in_rect$intersect_area/lu_in_rect$area
lu_prop_cov = left_join(st_drop_geometry(pts_in_extent), lu_in_rect, by=c("ID" = "ID"))
lu_prop_cov= lu_prop_cov[,c("ID", "proportion")]
lu_prop_cov[is.na(lu_prop_cov)] = 0
lu_prop_cov = rbind(lu_prop_cov, rect_buffers_not_in_extent)
colnames(lu_prop_cov) = c("ID", lu_name)
lu_prop_cov = drop_units(lu_prop_cov)
lu_prop_cov
}
#remove duplicate ID fields
idx = which(duplicated(names(lu_cov)))
lu_cov = lu_cov[,-idx]
lu_cov
write.table(lu_cov, file=paste(cov_path, city_short, "_LU_cov.csv", sep=""), sep=";", dec=",", row.names=F)
}
city_vect = c("Dakar", "Dakar", 32628)
city = city_vect[1]
city_short = city_vect[2]
myepsg = city_vect[3]
city_name = paste("malaria_data_", as.character(city_short), sep="")
malaria_data_sf=st_read(paste(Dir_input_malaria_data, city, '/', city_name, '.shp', sep=""))
pts_with_ID = malaria_data_sf[,c("ID")]
cov_path = paste(Dir_out_cov, city, '/', sep="")
dir.create(file.path(cov_path), showWarnings = F)
#read rectangular buffer shapefile
rect_buffers = st_read(paste(Dir_input_malaria_data, city, '/', city_name, '_1km_rect.shp', sep=""))
#rect_buffers$area = st_area(rect_buffers)
rect_buffers = st_as_sf(rect_buffers)
#NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#get input LU map
pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LU/"))
LU_map = st_read(paste(city_short, '_LU.shp', sep=""))
class = c("LU_ACS", c("ACS"))
#name of aggregated lc class
lu_name = class[1]
#values of lcz sub classes
lu_values = tail(class, -1)
#select lu classes
selected_lu_map = st_make_valid(LU_map[LU_map$MAP_LABEL %in% lu_values,])
selected_lu_map = st_as_sf(st_union(selected_lu_map,by_feature = F ))
#select points LU map extent
LU_map_labels = LU_map[,c("MAP_LABEL")]
pts_in_extent = pts_with_ID_transf[!is.na(over(as_Spatial(pts_with_ID_transf), as_Spatial(LU_map_labels))), ]
rect_buffers_in_extent = rect_buffers[rect_buffers$ID %in% pts_in_extent$ID,]
rect_buffers_in_extent$area = st_area(rect_buffers_in_extent)
pts_not_in_extent = pts_with_ID_transf[is.na(over(as_Spatial(pts_with_ID_transf), as_Spatial(LU_map_labels))), ]
rect_buffers_not_in_extent = st_drop_geometry(rect_buffers[rect_buffers$ID %in% pts_not_in_extent$ID,])
rect_buffers_not_in_extent$proportion = NA
rect_buffers_not_in_extent
if (length(rect_buffers_not_in_extent) != 0){rect_buffers_not_in_extent$proportion = NA}
if (nrow(rect_buffers_not_in_extent) != 0){rect_buffers_not_in_extent$proportion = NA}
#intersect lu map with rect buffers
lu_in_rect = st_intersection(selected_lu_map, rect_buffers_in_extent)
lu_in_rect$intersect_area = st_area(lu_in_rect)
#compute proportions
lu_in_rect = st_drop_geometry(lu_in_rect)
lu_in_rect$proportion = lu_in_rect$intersect_area/lu_in_rect$area
lu_prop_cov = left_join(st_drop_geometry(pts_in_extent), lu_in_rect, by=c("ID" = "ID"))
lu_prop_cov= lu_prop_cov[,c("ID", "proportion")]
lu_prop_cov[is.na(lu_prop_cov)] = 0
lu_prop_cov = rbind(lu_prop_cov, rect_buffers_not_in_extent)
colnames(lu_prop_cov) = c("ID", lu_name)
lu_prop_cov = drop_units(lu_prop_cov)
lu_prop_cov
View(rect_buffers_not_in_extent)
rect_buffers_not_in_extent
cities = list(c("Dakar", "Dakar", 32628),
c("Ouagadougou", "Ouaga", 32630),
c("Dar es salaam", "DES", 32737),
c("Kampala", "Kamp", 32636))
for (city_vect in cities){
city = city_vect[1]
city_short = city_vect[2]
myepsg = city_vect[3]
city_name = paste("malaria_data_", as.character(city_short), sep="")
malaria_data_sf=st_read(paste(Dir_input_malaria_data, city, '/', city_name, '.shp', sep=""))
pts_with_ID = malaria_data_sf[,c("ID")]
cov_path = paste(Dir_out_cov, city, '/', sep="")
dir.create(file.path(cov_path), showWarnings = F)
#read rectangular buffer shapefile
rect_buffers = st_read(paste(Dir_input_malaria_data, city, '/', city_name, '_1km_rect.shp', sep=""))
#rect_buffers$area = st_area(rect_buffers)
rect_buffers = st_as_sf(rect_buffers)
#
#   ###############################
#   #############COSMO#############
#   ###############################
#
#   if (city == "Kampala"||city=="Dar es salaam"){
#
#     #initialize df with cosmo variables
#     cosmo_cov = data.frame("ID" = pts_with_ID$ID)
#     cosmo_stack = stack()
#     setwd(paste(sep="", Dir_input_var, "1_COSMO/", city, "/"))
#
#     #get all files in the cosmo directory
#     files <- list.files(path = paste(sep="", Dir_input_var, "1_COSMO/", city, "/"), pattern="*.tif", full.names=FALSE, recursive=FALSE, ignore.case = FALSE)
#
#     #iterate over each file
#     for (file in files){
#       if (endsWith(file, ".tif")){
#
#         #get variable name and raster
#         layer_name = sub(pattern=".tif.*", "", x=file)
#         variable_name = sub(pattern = ".*DRY", "", x=layer_name)
#
#         assign(x=variable_name, value = raster(file))
#         raster_variable = get(variable_name)
#
#         try(cosmo_stack <- addLayer(cosmo_stack, raster_variable))
#
#         #assign crs
#         crs(raster_variable) = crs_REACT
#
#         #extract cosmo variable at malaria points
#         extracted_cov <- data.frame(pts_with_ID, raster::extract(raster_variable,pts_with_ID))
#
#         #add this newly extracted variable to big cosmo df
#         cosmo_cov = cbind(cosmo_cov, extracted_cov[, 3])
#         names(cosmo_cov)[length(names(cosmo_cov))]<-variable_name
#
#       }
#     }
#     #visualisation
#     plot(cosmo_cov)
#     plot(pts_with_ID, add=TRUE, lwd=4)
#     plot(cosmo_stack)
#     plot(cosmo_stack, addfun=function(){plot(malaria_data_sf["PfPR2_10"], add=TRUE)})
#     #write.table(cosmo_cov, file=paste(cov_path, city_short, "_cosmo_cov.csv", sep=""), sep=";", dec=",", row.names = F)
#
#
#
#   }
#
#   ###############################
#   ##############LCZ##############
#   ###############################
#
#   #NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#   pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
#
#   #create output directories
#   binary_maps_path = paste(sep="", Dir_input_var, "2_LCZ/", city, "/binary_maps/")
#   dist_path = paste(sep="", Dir_input_var, "2_LCZ/", city, "/distance_maps/")
#
#   dir.create(file.path(binary_maps_path), showWarnings = F)
#   dir.create(file.path(dist_path), showWarnings = F)
#
#   #get input LCZ map
#   setwd(paste(sep="", Dir_input_var, "2_LCZ/", city, "/"))
#   file <- list.files(path = paste(sep="", Dir_input_var, "2_LCZ/", city, "/"), pattern="*.tif", full.names=FALSE, recursive=FALSE, ignore.case = FALSE)
#
#   #extract band 2 which is the classif LCZ filtered with gaussian filter
#   LCZ_raster = raster(file, band = 2)
#   #plot(LCZ_raster)
#
#   LCZ_raster_meter = projectRaster(LCZ_raster, crs = CRS(paste("+init=epsg:", myepsg, sep="")))
#   #hist(LCZ_raster_meter)
#
#   if (city == "Dakar")
#   {legend_classes = list(c("LCZ_compact", list(1,2,3)),
#                          c("LCZ_open", list(4,5,6)),
#                          c("LCZ_indu", list(8,10)),
#                          c("LCZ_trees", list(11,12)),
#                          c("LCZ_lowland", list(13,14)),
#                          c("LCZ_water", list(17)))
#   } else if (city == "Ouagadougou"|| city == "Kampala") {legend_classes = list(c("LCZ_compact", list(1,2,3)),
#                                                                                c("LCZ_open", list(4,5,6)),
#                                                                                #c("LCZ_informal", list(7)),
#                                                                                c("LCZ_indu", list(8,10)),
#                                                                                c("LCZ_trees", list(11,12)),
#                                                                                c("LCZ_lowland", list(13,14)),
#                                                                                c("LCZ_water", list(17)))
#   } else { legend_classes = list(c("LCZ_compact", list(1,2,3)),
#                                  c("LCZ_open", list(4,5,6)),
#                                  #c("LCZ_informal", list(7)),
#                                  c("LCZ_indu", list(8,10)),
#                                  #c("LCZ_sparse", list(9)),
#                                  c("LCZ_trees", list(11,12)),
#                                  c("LCZ_lowland", list(13,14)),
#                                  c("LCZ_water", list(17)))}
#
#
#
#   lcz_cov = data.frame("ID" = pts_with_ID$ID)
#
#   #extract bounding box of points shapefile
#   bbx = st_bbox(rect_buffers)
#   #enlarge bbox
#   bbx = bb(bbx, ext=1.7)
#
#   #crop lcz map to extent of the malaria data buffers
#   extent_pts = c(bbx[1], bbx[3], bbx[2], bbx[4])
#   LCZ_raster_meter = crop(LCZ_raster_meter, extent_pts)
#
#   for (class in legend_classes){
#     #name of aggregated lcz class
#     lcz_name = class[1]
#
#     #values of lcz sub classes
#     lcz_numeric = tail(class, -1)
#
#     #create BINARY MAP
#     binary_map= (LCZ_raster_meter %in% lcz_numeric)
#     #plot(binary_map)
#     writeRaster(binary_map, paste(sep="", Dir_input_var, "2_LCZ/", city, "/binary_maps/", lcz_name), format="GTiff", overwrite = T)
#
#     #create PROPORTIONS MAP
#     lcz_prop_cov = cbind(st_drop_geometry(rect_buffers), exact_extract(binary_map, rect_buffers, fun = 'mean', progress = T))
#     colnames(lcz_prop_cov) = c("ID", lcz_name)
#
#     ###### START: OLDER WAY TO COMPUTE PROPORTIONS #####
#     #NOTE : I checked proportions obtained with this method and the other one and results are the same to more than 4 decimal places. Main difference is that this one is way longer !
#     #vectorize binary map
#     #binary_vect = rasterToPolygons(binary_map, dissolve = TRUE)
#     #binary_vect = st_as_sf(binary_vect)
#     #binary_vect_presence = binary_vect[binary_vect$layer==1,]
#
#     #plot(binary_vect)
#     #plot(binary_vect_presence, add=T)
#     #plot(rect_buffers, add=T)
#
#     #intersect binary vect map with rect buffers
#     #lcz_in_rect = st_intersection(binary_vect_presence, rect_buffers)
#
#     #compute area of intersection
#     #lcz_in_rect$intersect_area = st_area(lcz_in_rect)
#
#     #compute proportions
#     #lcz_in_rect = st_drop_geometry(lcz_in_rect)
#     #lcz_in_rect$proportion = lcz_in_rect$intersect_area/lcz_in_rect$area
#     #lcz_prop = left_join(st_drop_geometry(pts_with_ID), lcz_in_rect, by=c("ID" = "ID"))
#     #lcz_prop = lcz_prop[,c("ID", "proportion")]
#     #lcz_prop[is.na(lcz_prop)] = 0
#     #colnames(lcz_prop) = c("ID", lcz_name)
#     #lcz_prop_cov = drop_units(lcz_prop)
#
#     ###### END: OLDER WAY TO COMPUTE PROPORTIONS #####
#
#
#     #create DISTANCE MAP
#     #computes the distance, for all cells that are NA, to the nearest cell that is not NA
#     values(binary_map)[values(binary_map) == 0] = NA
#     lcz_dist = distance(binary_map, method="euclidean")/1000
#     #plot(lcz_dist)
#     #plot(pts_with_ID_transf, add=T)
#     writeRaster(lcz_dist, paste(dist_path, "dist_", lcz_name), overwrite=T, format = "GTiff")
#
#     #extract distances variable at malaria points
#     #lcz_dist_cov <- data.frame(st_drop_geometry(pts_with_ID_transf),raster::extract(lcz_dist, rect_buffers, fun = mean, na.rm = T))
#     lcz_dist_cov = cbind(st_drop_geometry(rect_buffers), exact_extract(lcz_dist, rect_buffers, fun = 'mean', progress = T))
#     colnames(lcz_dist_cov) = c("ID", paste("dist_", lcz_name, sep=""))
#
#     lcz_cov = left_join(lcz_cov, lcz_prop_cov, by = c("ID"= "ID"))
#     lcz_cov = left_join(lcz_cov, lcz_dist_cov, by = c("ID"= "ID"))
#
#
#   }
#
#   write.table(lcz_cov, file=paste(cov_path, city_short, "_LCZ_cov.csv", sep=""), sep=";", dec=",", row.names=F)
#
#
#   ###############################
#   ###############LC##############
#   ###############################
#
#   #NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#   pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
#
#   #create output directories
#   binary_maps_path = paste(sep="", Dir_input_var, "4_LULC/", city, "/LC/binary_maps/")
#   dir.create(file.path(binary_maps_path), showWarnings = F)
#
#   #get input LC map
#   setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LC/"))
#   LC_raster = raster(paste(city_short, "_LC.tif", sep=""))
#
#   if (city == "Dakar")
#   {legend_classes = list(c("LC_buildings", c(12, 111, 112, 113)),
#                          c("LC_trees", c(22)),
#                          c("LC_low_veg", c(23)),
#                          #c("LC_low_buildings", 111),
#                          c("LC_water", c(33)),
#                          #c("LC_med_buildings", 112),
#                          c("LC_bare_ground", c(45)),
#                          c("LC_artificial_ground", c(10)) )
#                          #c("LC_high_buildings", 113))
#
#   } else if (city == "Kampala") {legend_classes = list(c("LC_buildings", c(7)),
#                                                        c("LC_trees", c(3)),
#                                                        c("LC_low_veg", c(4)),
#                                                        c("LC_water", c(2)),
#                                                        c("LC_bare_ground", c(5)),
#                                                        c("LC_artificial_ground", c(6)) )
#
#   } else if (city == "Dar es salaam") {legend_classes =  list(c("LC_buildings", c(1, 111, 112, 113)),
#                                                               c("LC_trees",  c(5)),
#                                                               c("LC_low_veg", c(4)),
#                                                               #c("LC_low_buildings", 111),
#                                                               c("LC_water", c(2)),
#                                                               #c("LC_med_buildings", 112),
#                                                               c("LC_bare_ground", c(7)),
#                                                               c("LC_artificial_ground", c(3)) )
#                                                               #c("LC_high_buildings", 113))
#
#   } else {legend_classes =  list(c("LC_buildings", c(11, 112, 111)),
#                                  c("LC_trees", c(31)),
#                                  c("LC_low_veg", c(30)),
#                                  #c("LC_low_buildings", 112),
#                                  c("LC_water", c(41)),
#                                  #c("LC_high_buildings", 111),
#                                  c("LC_bare_ground", c(20)),
#                                  c("LC_artificial_ground", c(14)) )}
#
#
#
#   lc_cov = foreach(class=iter(legend_classes), .combine = "cbind", .packages=c("raster", "exactextractr", "sf", "rgdal", "dplyr")) %dopar% {
#
#     #name of aggregated lc class
#     lc_name = class[1]
#
#     #values of lcz sub classes
#     lc_numeric = tail(class, -1)
#
#     #create BINARY MAP
#     binary_map= (LC_raster %in% lc_numeric)
#     setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LC/binary_maps/"))
#     raster::writeRaster(x = binary_map, filename = lc_name, format="GTiff", overwrite = TRUE)
#
#     #create PROPORTIONS MAP
#     lc_prop_cov = cbind(sf::st_drop_geometry(rect_buffers), exactextractr::exact_extract(binary_map, rect_buffers, fun = 'mean', progress = T))
#     colnames(lc_prop_cov) = c("ID", lc_name)
#
#     #lc_cov = left_join(lc_cov, lc_prop_cov, by = c("ID"= "ID"))
#
#     lc_prop_cov
#
#   }
#
#   #remove duplicate ID fields
#   idx = which(duplicated(names(lc_cov)))
#   lc_cov = lc_cov[,-idx]
#   lc_cov
#   write.table(lc_cov, file=paste(cov_path, city_short, "_LC_cov.csv", sep=""), sep=";", dec=",", row.names=F)
#
#
#   ###############################
#   ###############LU##############
#   ###############################
#NOTE HERE WE DONT WORK IN CRS REACT but in projected crs of the country (as distances are computed)
#get input LU map
pts_with_ID_transf = st_transform(pts_with_ID, crs=CRS(paste("+init=epsg:", myepsg, sep="")))
setwd(paste(sep="", Dir_input_var, "4_LULC/", city, "/LU/"))
LU_map = st_read(paste(city_short, '_LU.shp', sep=""))
legend_classes = list(c("LU_ACS", c("ACS")),
c("LU_informal", c("PLAN", "PLAN_HD", "PLAN_MD", "PLAN_LD")),
c("LU_planned", c("UNPLAN", "UNPLAN_HD", "UNPLAN_MD", "UNPLAN_LD", "DEPR")),
c("LU_wetlands", c("WET")))
class = c("LU_ACS", c("ACS"))
lu_cov = foreach(class=iter(legend_classes), .combine = "cbind", .packages=c("raster", "units", "sf", "sp", "dplyr")) %dopar% {
#name of aggregated lc class
lu_name = class[1]
#values of lcz sub classes
lu_values = tail(class, -1)
#select lu classes
selected_lu_map = st_make_valid(LU_map[LU_map$MAP_LABEL %in% lu_values,])
selected_lu_map = st_as_sf(st_union(selected_lu_map,by_feature = F ))
#select points LU map extent
LU_map_labels = LU_map[,c("MAP_LABEL")]
pts_in_extent = pts_with_ID_transf[!is.na(over(as_Spatial(pts_with_ID_transf), as_Spatial(LU_map_labels))), ]
rect_buffers_in_extent = rect_buffers[rect_buffers$ID %in% pts_in_extent$ID,]
rect_buffers_in_extent$area = st_area(rect_buffers_in_extent)
pts_not_in_extent = pts_with_ID_transf[is.na(over(as_Spatial(pts_with_ID_transf), as_Spatial(LU_map_labels))), ]
rect_buffers_not_in_extent = st_drop_geometry(rect_buffers[rect_buffers$ID %in% pts_not_in_extent$ID,])
if (nrow(rect_buffers_not_in_extent) != 0){rect_buffers_not_in_extent$proportion = NA}
#intersect lu map with rect buffers
lu_in_rect = st_intersection(selected_lu_map, rect_buffers_in_extent)
lu_in_rect$intersect_area = st_area(lu_in_rect)
#compute proportions
lu_in_rect = st_drop_geometry(lu_in_rect)
lu_in_rect$proportion = lu_in_rect$intersect_area/lu_in_rect$area
lu_prop_cov = left_join(st_drop_geometry(pts_in_extent), lu_in_rect, by=c("ID" = "ID"))
lu_prop_cov= lu_prop_cov[,c("ID", "proportion")]
lu_prop_cov[is.na(lu_prop_cov)] = 0
lu_prop_cov = rbind(lu_prop_cov, rect_buffers_not_in_extent)
colnames(lu_prop_cov) = c("ID", lu_name)
lu_prop_cov = drop_units(lu_prop_cov)
lu_prop_cov
}
#remove duplicate ID fields
idx = which(duplicated(names(lu_cov)))
lu_cov = lu_cov[,-idx]
lu_cov
write.table(lu_cov, file=paste(cov_path, city_short, "_LU_cov.csv", sep=""), sep=";", dec=",", row.names=F)
}
